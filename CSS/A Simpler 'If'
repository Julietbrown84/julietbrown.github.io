A Simpler 'If'
You've seen the Ruby if statement before:

if condition
  # Do something!
end
If the "do something" is a short, simple expression, however, we can move it up into a single line (as you saw in the last exercise). The syntax looks like this:

expression if boolean
Ruby will expect an expression followed by if followed by a boolean. The order is important. You can do this:

puts "It's true!" if true
but not this:

if true puts "It's true!"
It's also important to note that you don't need an end when you write your if statement all on one line.

# Type your Ruby code below!

puts "yes yes it is true!" if true

puts "yea ok" unless true


One Good Turn Deserves a Ternary
During your Ruby adventures, you've seen that you often have many options when it comes to accomplishing any one goal. The if statement is no exception!

An even more concise version of if/else is the ternary conditional expression. It's called "ternary" because it takes three arguments: a boolean, an expression to evaluate if the boolean is true, and an expression to evaluate if the boolean is false.

The syntax looks like this:

boolean ? Do this if true: Do this if false
An example might be

puts 3 < 4 ? "3 is less than 4!" : "3 is not less than 4."
Remember: the order of arguments is important, and you don't need an end for this version of if/else.

